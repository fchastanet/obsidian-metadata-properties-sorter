import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { syncFiles, watchAndSync } from "./scripts/sync.mjs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const debug = (process.argv[2] === "debug");

// Debug mode configuration
const debugConfig = {
	sourcemap: "inline",
	minify: false,
	keepNames: true,
	define: {
		"process.env.NODE_ENV": '"development"',
		"DEBUG": "true"
	},
	banner: {
		js: banner + `\n/* DEBUG MODE ENABLED - Source maps: inline */\n`,
	},
	logLevel: "debug",
	metafile: true
};

// Development mode configuration
const devConfig = {
	sourcemap: "inline",
	minify: false,
	define: {
		"process.env.NODE_ENV": '"development"'
	},
	banner: {
		js: banner,
	},
	logLevel: "info"
};

// Production mode configuration
const prodConfig = {
	sourcemap: false,
	minify: true,
	define: {
		"process.env.NODE_ENV": '"production"'
	},
	banner: {
		js: banner,
	},
	logLevel: "info"
};

// Select configuration based on mode
const modeConfig = debug ? debugConfig : (prod ? prodConfig : devConfig);

const context = await esbuild.context({
	...modeConfig,
	entryPoints: ["src/index.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	treeShaking: true,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	syncFiles(); // Sync files after production build
	process.exit(0);
} else if (debug) {
	console.log("üêõ Debug mode enabled with inline source maps");
	const result = await context.rebuild();
	
	// In debug mode, output build information
	if (result.metafile) {
		console.log("üìä Build analysis:");
		console.log(`  Bundle size: ${Object.values(result.metafile.outputs)[0]?.bytes || 'unknown'} bytes`);
		console.log(`  Entry points: ${Object.keys(result.metafile.inputs).length}`);
	}
	
	syncFiles(); // Sync files after debug build
	
	// Start watching for debug mode
	await context.watch();
	watchAndSync(); // Set up auto-sync for development
	console.log("üëÄ Watching for changes in debug mode...");
} else {
	await context.watch();
	watchAndSync(); // Set up auto-sync for development
}
