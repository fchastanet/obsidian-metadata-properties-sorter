name: Create Release

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm install

      - name: Build the plugin
        run: npm run build

      - name: Test the plugin
        run: npm run test

      - name: Extract version from manifest.json
        id: get_version
        run: |
          version=$(jq -r '.version' manifest.json)
          echo "Version found: $version"
          echo "manifest_version=$version" >> $GITHUB_ENV

      - name: Check if version exists
        id: check_version
        uses: actions/github-script@v7
        with:
          script: |
            console.log("Checking version: " + process.env.manifest_version);
            try {
              const { data: releases } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.manifest_version
              });
              const exists = releases.tag_name === process.env.manifest_version;
              if (exists) {
                console.error(`Version ${process.env.manifest_version} already exists`);
                throw new Error("Version exists");
              } else {
                console.info(`Version ${process.env.manifest_version} does not exist`);
              }
            } catch (error) {
              if (error.status === 404) {
                console.info(`Version ${process.env.manifest_version} does not exist`);
              } else {
                throw error;
              }
            }

      - name: Create tag
        id: create-tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ env.manifest_version }}`,
              sha: context.sha
            })

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.manifest_version }}
          fail_on_unmatched_files: true
          make_latest: true
          files: |
            dist/main.js
            dist/styles.css
            manifest.json
